name: build

on:
  push:
    # branches:
    #   # 테스트를 위해 임시로 추가한 브랜치
    #   - "feature/github-actions**"
    paths:
      - "!*.md"
      - "**"
    # Temporarily disable this action
    # See https://github.community/t/how-can-i-disable-a-github-action/17049
    # branches-ignore:
    #   - "**"
  workflow_dispatch:
    inputs:
      not-use-cache:
        type: boolean
        description: Do not use cached pacakges
        required: true
        default: 'false'


defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  build:
    # contains function is not case sensitive
    if: |
      !contains(github.event.commits[0].message, '[skip ci]')
      && !startswith(github.event.commits[0].message, 'skip ci ')
      && !contains(github.event.commits[0].message, '[wip]')
      && !startswith(github.event.commits[0].message, 'wip ')
    runs-on: ${{ matrix.os }}
#    runs-on: self-hosted
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            go-os: linux
            go-arch: amd64
            go-version: '1.24.0'
            image-name: "ghcr.io/unchartedsky/sonic-boom"
          # ARM64를 지원하려면 Dockerfile 수정이 필요
          # - os: ubuntu-24.04-arm
          #   go-os: linux
          #   go-arch: arm64
          #   go-version: '1.24.0'
    steps:
      - name: Env
        run: |
          env | sort

          whoami

      - uses: actions/checkout@v4
        with:
          # https://github.community/t/github-actions-git-command-ls-remote-fails-for-private-repo-when-on-runner-works-locally/191104
          persist-credentials: false

      - name: Set up Go ${{ matrix.go-version }}
        id: set-up-go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Display Go version
        run: go version

      - name: OS Packages
        run: |
          echo "Do nothing"
          # sudo apt-get install -y -q libsnappy-dev

      # https://medium.com/ai2-blog/python-caching-in-github-actions-e9452698e98d
      # https://stackoverflow.com/questions/68896173/issue-caching-python-dependencies-in-github-actions
      - uses: actions/cache@v4
        id: cache
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}${{ github.workflow }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}${{ github.workflow }}-go-

      - name: Build
        run: |
          mkdir -p "bin/${GOOS}-${GOARCH}"

          go generate ./...
          go build -o bin/${GOOS}-${GOARCH}/sonic-boom main.go
        env:
          GOOS: ${{ matrix.go-os }}
          GOARCH: ${{ matrix.go-arch }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.5

      - name: Test
        run: |
          go test -v ./...
        env:
          GOOS: ${{ matrix.go-os }}
          GOARCH: ${{ matrix.go-arch }}

      - name: Prepare
        id: prep
        run: |
          VERSION=edge
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            VERSION=nightly
          elif [[ "${{ github.event_name }}" != "pull_request" ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
          else
            VERSION=${GITHUB_HEAD_REF}
          fi
          VERSION=$(echo "${VERSION}" | sed -r 's/\//_/g')
          TAGS="${DOCKER_IMAGE}:${VERSION}"

          if [[ "${VERSION}" == "master" ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:${GITHUB_REF#refs/tags/v}"
          fi

          SHORT_ID=$(echo ${GITHUB_SHA} | cut -c -7)
          TAGS="$TAGS,${DOCKER_IMAGE}:sha-${SHORT_ID}"
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
        env:
          DOCKER_IMAGE: ${{ matrix.image-name }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true

      - name: Test
        run: |
          set -x
          docker version
          docker buildx version
          docker buildx ls

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image-name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v3
        with:
          file: ${{ github.workspace }}/Dockerfile
          context: ${{ github.workspace }}
          platforms: linux/amd64
          # platforms: linux/amd64,linux/arm64
          tags: ${{ steps.prep.outputs.tags }}
          pull: true
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
